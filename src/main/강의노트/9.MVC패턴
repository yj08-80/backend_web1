[ MVC 패턴 ]
    1. 정의 : 소프트웨어 공학에서 사용되는 디자인 패턴 중 하나
    2. 목적 : 프로그램을 깔끔하고 효율적으로 만들기 위한 설계 방법
    3. 종류
        1) MVC 1패턴 : controller/view <---> model
            -> JSP 파일에서 HTML과 JAVA를 한 번에 작성
            -> 장점 : 빠른 개발, 단점 : 유지보수/역할분담 어렵다
        2) MVC 2패턴 : view <---> controller <---> model
            -> view 파일은 HTML만 작성, controller 에서는 제어(로직) 작성
            -> 장점 : 화면/로직 분리, 단점 : 파일의 수 관리/증가
        3) MVC2 3Tire : view <---> controller <---> service <---> model
            -> Spring MVC 에서 사용되는 패턴, controller의 역할( 제어와 로직 ) 분리
            -> 장점 : 관점지향프로그래밍 특화/역할분담, 단점 : 파일 수 관리/증가

    4. 구역/레이어 종류
        1) VIEW : JSP/타임리프/머스테치/REACT( HTML , CSS , JS ) 프론트엔드(화면구현)
            -> 역할 : 프론트엔드( 화면구현 )
        2) CONTROLLER : @RestController @Controller
            -> 역할 : HTTP 통신( 요청/응답 ), 타입 관리 변환, (타입)유효성검사
        3) SERVICE : @Service
            -> 역할 : 비지니스로직( 기능에 있어서 실질적인 중요코드 )
            -> CRUD, 데이터 검증, 연산, 알고리즘, *트랜잭션* 등, SQL 제외한 실질적인 로직
        4) REPOSITORY
            -> 역할 : 저장소( 실질적인 저장소/엔티티를 조작하는 코드 ), DAO, **JPA, myBatis**


    * 유효성검사 위치( 유지보수단계예서도 계속 ) : JS, CONTROLLER, SERVICE, SQL