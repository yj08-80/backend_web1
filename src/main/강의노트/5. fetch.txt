[ 동기 vs 비동기 ] : 프로그래밍에서 작업 처리하는 방식
    동기란 ? 여러 작업이 실행될 때 작업간의 실행 순서를 제어
            - 순차처리, 느리다, 무결성 중시 예) 계좌이체 : 출금/입금, 하나의 스레드가 동시에 접근 차단
    비동기란 ? 여러 작업이 실행될 때 독립적으로 실행 순서
            - 동시처리, 빠르다, 무결성 보장 안됨 예) 채팅, 하나의 스레드가 동시에 접근 허용
[ 비동기 통신 ]


[ fetch ]
    1. 정의 : JS에서 제공하는 내장 (통신) 함수
    2. 역할 : http 요청을 보내고 응답을 비동기적으로 처리하는 함수
    3. 사용법
    [ 비동기 방법 ]
        fetch( URL , OPTION )
        .then( response => response.json() )
        .then( data => {} )
        .catch( error => {} )
    [ 동기 방법 ] : async/await 이용한 동기 형식
    async () => {
        try{
            const response = await fetch( url , option );
            const data = await response.json();
        }catch( error ){
            console.log( error );
        }
    }

    4. URL : Spring 프로젝트 내 통신한 controller @XXXmapping에서 정의된 URL
             주로 get/delete queryString : `url ? param1 = ${value1} & param2 = ${value}`
             주로 식별자
       OPTION : 주로 get/delete : { method : "GET" }

                주로 post/put : { method : "POST" ,
                                headers : { "Content-Type" : "application/json" },
                                body : JSON.stringify( data ) }

       then( 응답객체 => 응답객체.json() ) : 응답객체를 JSON 타입으로 변환
       then( 응답객체 => 응답객체.text() ) : 응답객체를 문자 타입으로 뱐환
       then( 변환된 객체 => { 실행문 } ) : 통신 응답 결과
       catch( dpfjrorcp => { 실행문 } ) : 통신 에러 발생




