[ IOC ] : Inversion Of Control , 제어 의 역전
    1. 정의 : 객체의 생성 및 관리의 *제어권*을 개발자가 아닌 스프링 프레임워크가 담당한다.
    2. 스프링에서는 **컨테이너** 가 이를 담당한다.
    3. 목적 : 효율적이고 규칙적인 객체를 관리/사용 하기 위해서 스프링이 이를 대신한다.
        - 왜? 여러 사람들이 비규칙적인 객체를 사용하면 중복적인 객체 혹은 객체 충돌 발생할 수 도 있다.
    3. 주요 어노테이션
        @Component : 컨테이너(스프링 메모리/저장소) 에 클래스의 (빈bean)정보를 등록한다.
        ( @Component 내장된 주요 어노테이션 )
            - @Controller @RestController @Service @Repository @Configuration 등등
            - 각기 다른 기능들과 @Component가 내장 됨.
            - 주로 MVC 패턴 빈 등록한다. 즉] MVC 패턴은 IOC 기반 이면서 스프링의 필수 패턴!

[ DI ] : Dependency Injection : 의존성 주입
    1. 정의 : 객체를 직접 생성하지 않고 외부(스프링 컨테이너)로 부터 주입받도록 하는 방법
    2. 목적 : 객체들간의 결합도(관계)를 낮추고 유지보수성을 향상
    3. 주요 어노테이션
        @Autowired : 스프링 컨테이너에 등록된 빈(객체)를 꺼내온다.

    4. 사용법
        1) 멤버변수(필드)에 주입
            @Autowired private 클래스명 변수명;

        2) 생성자에 주입 *권장* ( final이란? 수정 불가능 키워드/초기값 변수 )
            final 클래스명 변수명;
            @Autowired
            public 클래스명( 클래스명 매개변수명 ){ this.변수명 = 매개변수명; }

        3) Setter를 이용한 주입
            클래스명 변수명;
            @Autowired
            public void set변수명( 클래스명 매개변수명 ){ this.변수명 = 매개변수명; }

* 즉] 싱글톤 대신에 사용 가능하다. 즉] DTO 는 싱글톤이 없었으므로 IOC/DI 와 상관없다.

                        [ IOC ]
--스프링 컨테이너--
|               |
|               |
| boardControl  | ----- @Autowired-------> boardControl 객체 꺼내기
|               |
|----------------











